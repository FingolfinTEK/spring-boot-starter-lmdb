package com.fingolfintek.lmdb;

import com.fingolfintek.lmdb.tx.LMDBTransactional;
import javaslang.Tuple;
import javaslang.Tuple2;
import mockit.Expectations;
import mockit.Mock;
import mockit.MockUp;
import mockit.Mocked;
import org.fusesource.lmdbjni.Database;
import org.junit.Before;
import org.junit.BeforeClass;
import org.junit.Test;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.test.annotation.Rollback;

import java.util.List;
import java.util.concurrent.atomic.AtomicInteger;

import static org.assertj.core.api.Assertions.assertThat;
import static org.fusesource.lmdbjni.Constants.bytes;

@Rollback
@LMDBTransactional
public class LMDBTemplateIntegrationTest extends BaseIntegrationTest {

    private static final Key KEY_0 = Key.from(0, 0);
    private static final Key KEY_1 = Key.from(0, 1);
    private static final Key KEY_AUTO = Key.from(1, 2);
    private static final String VALUE_0 = "Initial value 0";
    private static final String VALUE_1 = "Initial value 1";

    @Autowired
    private Database db;

    @Autowired
    private LMDBTemplate template;

    @BeforeClass
    public static void setUpClass() throws Exception {
        new MockUp<System>() {
            @Mock
            public long currentTimeMillis() {
                return 1;
            }
        };
    }

    @Before
    public void setUp() {
        template.write(db, KEY_0, VALUE_0);
        template.write(db, KEY_1, VALUE_1);
    }

    @Test
    public void getWithSpecifiedType() {
        String value = template.get(db, KEY_0, String.class);
        assertThat(value).isEqualTo(VALUE_0);
    }

    @Test
    public void getWithImpliedType() {
        String value = template.get(db, KEY_0);
        assertThat(value).isEqualTo(VALUE_0);
    }

    @Test
    public void write() {
        byte[] key = bytes("test");
        template.write(db, key, "Test 1");
        assertThat(template.get(db, key, String.class)).isEqualTo("Test 1");
    }

    @Test
    public void writeWithAutoGeneratedKeys(@Mocked AtomicInteger counter) {
        new Expectations() {{
            counter.incrementAndGet();
            result = 2;
        }};

        template.write(db, "Test auto");
        assertThat(template.get(db, KEY_AUTO, String.class)).isEqualTo("Test auto");
    }

    @Test
    @SuppressWarnings("unchecked")
    public void iterate() {
        List<Tuple2<Key, String>> list = template.iterate(db, String.class).toJavaList();
        assertThat(list).usingRecursiveFieldByFieldElementComparator()
                .containsExactly(Tuple.of(KEY_0, VALUE_0), Tuple.of(KEY_1, VALUE_1));
    }

    @Test
    @SuppressWarnings("unchecked")
    public void readAllEntries() {
        List<Tuple2<Key, String>> list = template.readAllEntries(db, String.class);
        assertThat(list).usingRecursiveFieldByFieldElementComparator()
                .containsExactly(Tuple.of(KEY_0, VALUE_0), Tuple.of(KEY_1, VALUE_1));
    }

    @Test
    public void iterateValues() {
        List<String> list = template.iterateValues(db, String.class).toJavaList();
        assertThat(list).containsExactly(VALUE_0, VALUE_1);
    }
}
